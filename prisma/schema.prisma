// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum SystemEmpType {
  Admin
  MangeResturant
  Finical
}

enum PaymentType {
  beforeTakeOrder
  afterTakeOrder
}

enum DeliverType {
  employeerDeliverFood
  customerPickFood
}

 enum UserPermissions {
  SystemAdmin
  ResturantAdmin
  Cacher
  Kitchen
}

model User {
  id          Int              @id @default(autoincrement())
  userName    String @unique
  name        String
  password    String
  permissons  UserPermissions[]
  Resturant   Resturant?       @relation(fields: [resturantId], references: [id])
  resturantId Int?
}

model Resturant {
  id         Int     @id @default(autoincrement())
  isDisabled Boolean @default(true)

  name         String
  img          String
  location     String
  admins       User[]
  mainCategory MainCategory[]
  customerSpot CustomerSpot[]
  kitchen      Kitchen[]
  orderType    OrderType[]

}

model Kitchen {
  id         Int     @id @default(autoincrement())
  isDisabled Boolean @default(false)

  resturatn    Resturant      @relation(fields: [resturantId], references: [id])
  name         String
  customerSpot CustomerSpot[]
  meal         Meal[]
  resturantId  Int
  orderType    OrderType[]
}

model CustomerSpot {
  id         Int     @id @default(autoincrement())
  isDisabled Boolean @default(false)

  identifier  String
  resturant   Resturant   @relation(fields: [resturantId], references: [id])
  order       Order[]
  resturantId Int
  kitchen     Kitchen?    @relation(fields: [kitchenId], references: [id])
  kitchenId   Int?
  orderType   OrderType[]

}

model MainCategory {
  id          Int           @id @default(autoincrement())
  title       String
  desc        String
  img         String
  resturant   Resturant     @relation(fields: [resturantId], references: [id])
  children    SubCategory[]
  resturantId Int
}

model SubCategory {
  id             Int          @id @default(autoincrement())
  title          String
  // img            String
  mainCategoryId Int
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id])
  meals          Meal[]
}

model Meal {
  id            Int         @id @default(autoincrement())
  title         String
  desc          String
  img           String?
  price         Float
  extra String[]
  isDisabled Boolean @default(false)
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int
  orderItem     OrderItem[]
  kitchen       Kitchen?    @relation(fields: [kitchenId], references: [id])
  kitchenId     Int?
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  meal    Meal   @relation(fields: [mealId], references: [id])
  count   Int
  notes   String?
  selectedExtra String[]
  mealId  Int
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId Int
}

model OrderType {
  id             Int           @id @default(autoincrement())
  name           String
  paymentMsg     String
  deliverMsg     String
  paymentType    PaymentType
  deliverType    DeliverType
  resturant      Resturant    @relation(fields: [resturantId], references: [id])
  resturantId    Int
  selectKitchenVia SelectKitchenVia

  order          Order[]
  customerSpot   CustomerSpot[]
  kitchen        Kitchen[]

}

model Order {
  id               Int               @id @default(autoincrement())
  orderItems       OrderItem[]
  kitchenIds Int[]
  status           OrderStatus
  customerSpot     CustomerSpot      @relation(fields: [customerSpotId], references: [id])
  customerSpotId   Int
  customerFeedBack CustomerFeedBack?
  type             OrderType         @relation(fields: [orderTypeId], references: [id])
  orderTypeId      Int
  price Float
  isPayed Boolean @default(false)
}

enum OrderStatus {
  WaitPayment
  WaitInKitchen
  DoneByKitchen
  DeliveredByKitchen
  Canceled
  Done
}

model CustomerFeedBack {
  id      Int            @id @default(autoincrement())
  order   Order          @relation(fields: [orderId], references: [id])
  desc    String
  rate    Int
  type    FeedBackType[]
  orderId Int            @unique
}

enum FeedBackType {
  BadFood
  BadService
  BadTiming
}


enum SelectKitchenVia {
  None
  CustomerSpot
  Meal
}