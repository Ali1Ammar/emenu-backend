// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemEmpType {
  Admin
  MangeResturant
  Finical
}

model SystemAdmin {
  id       Int           @id @default(autoincrement())
  userName String
  name     String
  password String
  type     SystemEmpType
}

enum PaymentType {
  beforeTakeOrder
  afterTakeOrder
}

enum DeliverType {
  employeerDeliverFood
  customerPickFood
}

enum ResturantEmpType {
  Admin
  Kitchen
  Casher
}

model ResturantEmp {
  id          Int              @id @default(autoincrement())
  userName    String
  name        String
  password    String
  type        ResturantEmpType
  Resturant   Resturant?       @relation(fields: [resturantId], references: [id])
  resturantId Int?
}

model Resturant {
  id           Int            @id @default(autoincrement())
  name         String
  img          String
  location     String
  isDisabled   Boolean
  paymentType  PaymentType
  deliverType  DeliverType
  admins       ResturantEmp[]
  MainCategory MainCategory[]
  customerSpot   CustomerSpot[]
  Kitchen      Kitchen[]
}

model Kitchen {
  id          Int          @id @default(autoincrement())
  resturatn   Resturant    @relation(fields: [resturantId], references: [id])
  name        String
  isDisabled  Boolean
  customerSpot  CustomerSpot[]
  meal        Meal[]
  resturantId Int
}

model CustomerSpot {
  id          Int       @id @default(autoincrement())
  note        String?
  resturant   Resturant @relation(fields: [resturantId], references: [id])
  Order       Order[]
  resturantId Int
  kitchen     Kitchen?  @relation(fields: [kitchenId], references: [id])
  kitchenId   Int?
}

model MainCategory {
  id          Int           @id @default(autoincrement())
  title       String
  desc        String
  img         String
  resturant   Resturant     @relation(fields: [resturantId], references: [id])
  children    SubCategory[]
  resturantId Int
}

model SubCategory {
  id             Int          @id @default(autoincrement())
  title          String
  img            String
  mainCategoryId Int
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id])
  meals          Meal[]
}

model Meal {
  id            Int         @id @default(autoincrement())
  title         String
  desc          String
  img           String
  price         Float
  subCategort   SubCategory @relation(fields: [SubCategoryId], references: [id])
  SubCategoryId Int
  OrderItem     OrderItem[]
  Kitchen       Kitchen?    @relation(fields: [kitchenId], references: [id])
  kitchenId     Int?
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  meal    Meal   @relation(fields: [mealId], references: [id])
  count   Int
  notes   String
  mealId  Int
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId Int
}

model Order {
  id               Int               @id @default(autoincrement())
  orderItems       OrderItem[]
  status           OrderStatus
  customerSpot       CustomerSpot        @relation(fields: [customerSpotId], references: [id])
  customerSpotId     Int
  customerFeedBack CustomerFeedBack?
}

enum OrderStatus {
  WaitPayment
  Cooking
  Cooked
  Delivered
  Canceled
  Done
}

model CustomerFeedBack {
  id      Int            @id @default(autoincrement())
  order   Order          @relation(fields: [orderId], references: [id])
  desc    String
  rate    Int
  type    FeedBackType[]
  orderId Int            @unique
}

enum FeedBackType {
  BadFood
  BadService
  BadTiming
}
